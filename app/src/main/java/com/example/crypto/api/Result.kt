package com.example.crypto.api

//Модификатор sealed требуется, чтобы описать изолированный класс.
// Изолированные классы используются для отражения ограниченных иерархий классов. Когда значение
// может иметь тип только из ограниченного набора. Они являются расширением enum-классов. Набор
// значений enum-типа также ограничен, но каждая enum-константа существует только в единственном
// экземпляре, в то время, как наследник изолированного класса может иметь множество экземплятров,
// которые могут нести в себе какой-то состояние. Изолированный класс может иметь наследников,
// но все они должны быть объявлены в том же файле, что и сам изолированный класс.
sealed class Result<out R> {
    //Содержит в себе исходный ответ от сервера
    data class Success<out T>(val data: T): Result<T>()
    //Седержит в себе ошибку в случае её возникновения
    data class Error(val message: String): Result<Nothing>()
    //Производится сетевой запрос или нет
    object Loading: Result<Nothing>()

    override fun toString(): String {
        return when(this) {
            is Success<*> -> "Success [data = $data]"
            is Error -> "Error [message = $message]"
            is Loading -> "Loading"
        }
    }
}
//Данное свойство отвечает на вопрос, успешно ли выполнен запрос
val Result<*>.succesed
    get() = this is Result.Success && data != null